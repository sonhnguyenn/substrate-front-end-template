{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","substrate-lib/utils.js","substrate-lib/components/TxButton.js","substrate-lib/components/DeveloperConsole.js","AccountSelector.js","Balances.js","BlockNumber.js","Events.js","Interactor.js","Metadata.js","NodeInfo.js","TemplateModule.js","Transfer.js","Upgrade.js","App.js","index.js"],"names":["configEnv","require","envVars","reduce","mem","n","undefined","process","slice","config","configCommon","connectedSocket","queryString","parse","window","location","search","rpc","PROVIDER_SOCKET","console","log","INIT_STATE","socket","jsonrpc","RPC","types","CUSTOM_TYPES","keyring","keyringState","api","apiError","apiState","reducer","state","action","type","payload","Error","loadAccts","SubstrateContext","React","createContext","SubstrateContextProvider","props","initState","forEach","key","useReducer","dispatch","provider","WsProvider","_api","ApiPromise","on","isReady","then","err","connect","asyncLoadAccounts","a","web3Enable","APP_NAME","web3Accounts","allAccounts","map","address","meta","name","source","loadAll","isDevelopment","DEVELOPMENT_KEYRING","error","loadAccounts","Provider","value","children","useSubstrate","useContext","utils","paramConversion","num","TxButton","accountPair","label","setStatus","color","style","attrs","disabled","useState","unsub","setUnsub","sudoKey","setSudoKey","palletRpc","callable","inputParams","paramFields","isSudo","isUncheckedSudo","useEffect","acctPair","getFromAcct","isInjected","web3FromSource","injected","fromAcct","setSigner","signer","txResHandler","status","isFinalized","asFinalized","toString","txErrHandler","sudoTx","transformed","transformParams","txExecute","tx","sudo","signAndSend","catch","uncheckedSudoTx","sudoUncheckedWeight","signedTx","unsignedTx","send","queryResHandler","result","isNone","query","emptyAsNull","constant","consts","transaction","opts","paramVal","inputParam","trim","params","field","ind","memo","converted","indexOf","split","e","single","isNumType","Number","parseFloat","parseInt","some","el","Button","basic","onClick","length","every","paramField","param","optional","TxGroupButton","Group","Or","DeveloperConsole","util","utilCrypto","Main","setAccountAddress","accountSelected","setAccountSelected","keyringOptions","getPairs","account","text","toUpperCase","icon","initialAddress","Menu","attached","tabular","backgroundColor","borderColor","paddingTop","paddingBottom","Container","Image","src","size","position","alignItems","target","rel","href","circular","Dropdown","selection","clearable","placeholder","options","onChange","_","dropdown","BalanceAnnotation","accountBalance","setAccountBalance","unsubscribe","system","balance","data","free","toHuman","Label","pointing","Icon","AccountSelector","accounts","balances","setBalances","addresses","unsubscribeAll","multi","balancesMap","acc","index","Grid","Column","Table","celled","striped","Body","Row","Cell","width","textAlign","display","minWidth","compact","finalized","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","bestNumber","derive","chain","bestNumberFinalized","number","toNumber","timer","time","id","setInterval","clearInterval","Card","Content","Statistic","extra","BlockNumber","FILTERED_EVENTS","eventFeed","setEventFeed","events","record","event","phase","typeDef","eventName","section","method","includes","summary","extraText","documentation","join","content","allEvents","feedMaxHeight","float","floated","Feed","clear","overflow","maxHeight","Events","argIsOptional","arg","startsWith","interxType","setInterxType","palletRPCs","setPalletRPCs","callables","setCallables","setParamFields","initFormState","formState","setFormState","getApiType","apiType","Object","keys","sort","filter","pr","c","metaType","isPlain","isMap","asMap","isDoubleMap","asDoubleMap","key1","key2","metaArgs","args","metaParam","isOptional","onPalletCallableParamChange","res","onInterxTypeChange","ev","getOptionalMsg","Form","overflowX","inline","Radio","checked","Field","fluid","Input","InteractorSubmit","overflowWrap","Interactor","version","metadata","setMetadata","getMetadata","Header","Meta","Modal","trigger","scrolling","Description","JSON","stringify","Metadata","nodeInfo","setNodeInfo","Promise","all","nodeName","nodeVersion","getInfo","NodeInfo","currentValue","setCurrentValue","formValue","setFormValue","templateModule","something","newValue","unwrap","centered","TemplateModule","addressTo","amount","prev","proposal","setProposal","handleFileChosen","file","fileReader","FileReader","onloadend","buffer","Array","from","Uint8Array","b","padStart","readAsArrayBuffer","accept","files","accountAddress","getPair","loader","Dimmer","active","Loader","columns","padded","Message","negative","floating","header","contextRef","createRef","ref","Sticky","context","stackable","stretched","App","ReactDOM","render","document","getElementById"],"mappings":"8dAEMA,EAAYC,EAAQ,MAOpBC,EAJc,CAClB,4BACA,iCAE0BC,QAAO,SAACC,EAAKC,GAGvC,YADuBC,IAAnBC,gJAAYF,KAAkBD,EAAIC,EAAEG,MAAM,KAAOD,gJAAYF,IAC1DD,IACN,IAGYK,EADH,uCAAQC,GAAiBV,GAAcE,GCH7CS,EADcC,IAAYC,MAAMC,OAAOC,SAASC,QAClBC,KAAOR,EAAOS,gBAClDC,QAAQC,IAAR,4BAAiCT,IAKjC,IAAMU,EAAa,CACjBC,OAAQX,EACRY,QAAQ,2BAAMA,KAAYd,EAAOe,KACjCC,MAAOhB,EAAOiB,aACdC,QAAS,KACTC,aAAc,KACdC,IAAK,KACLC,SAAU,KACVC,SAAU,MAMNC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,eACH,OAAO,2BAAKF,GAAZ,IAAmBF,SAAU,iBAE/B,IAAK,UACH,OAAO,2BAAKE,GAAZ,IAAmBJ,IAAKK,EAAOE,QAASL,SAAU,eAEpD,IAAK,kBACH,OAAO,2BAAKE,GAAZ,IAAmBF,SAAU,UAE/B,IAAK,gBACH,OAAO,2BAAKE,GAAZ,IAAmBF,SAAU,QAASD,SAAUI,EAAOE,UAEzD,IAAK,eACH,OAAO,2BAAKH,GAAZ,IAAmBL,aAAc,YAEnC,IAAK,cACH,OAAO,2BAAKK,GAAZ,IAAmBN,QAASO,EAAOE,QAASR,aAAc,UAE5D,IAAK,gBACH,OAAO,2BAAKK,GAAZ,IAAmBN,QAAS,KAAMC,aAAc,UAElD,QACE,MAAM,IAAIS,MAAJ,wBAA2BH,EAAOC,SA8B1CG,GAAY,EA4BVC,EAAmBC,IAAMC,gBAEzBC,EAA2B,SAACC,GAEhC,IAAMC,EAAS,eAAQvB,GACC,CAAC,SAAU,SACnBwB,SAAQ,SAAAC,GACtBF,EAAUE,GAA8B,qBAAfH,EAAMG,GAAuBF,EAAUE,GAAOH,EAAMG,MALrC,MAQhBC,qBAAWf,EAASY,GARJ,mBAQnCX,EARmC,KAQ5Be,EAR4B,KAY1C,OAjEc,SAACf,EAAOe,GAAc,IAC5BjB,EAAqCE,EAArCF,SAAUT,EAA2BW,EAA3BX,OAAQC,EAAmBU,EAAnBV,QAASE,EAAUQ,EAAVR,MAEnC,IAAIM,EAAJ,CAEAiB,EAAS,CAAEb,KAAM,iBAEjB,IAAMc,EAAW,IAAIC,aAAW5B,GAC1B6B,EAAO,IAAIC,aAAW,CAAEH,WAAUxB,QAAOR,IAAKM,IAGpD4B,EAAKE,GAAG,aAAa,WACnBL,EAAS,CAAEb,KAAM,UAAWC,QAASe,IAErCA,EAAKG,QAAQC,MAAK,SAACJ,GAAD,OAAUH,EAAS,CAAEb,KAAM,0BAE/CgB,EAAKE,GAAG,SAAS,kBAAML,EAAS,CAAEb,KAAM,uBACxCgB,EAAKE,GAAG,SAAS,SAAAG,GAAG,OAAIR,EAAS,CAAEb,KAAM,gBAAiBC,QAASoB,QA6CnEC,CAAQxB,EAAOe,GAtCI,SAACf,EAAOe,GAC3B,IAAMU,EAAiB,uCAAG,4BAAAC,EAAA,6DACxBX,EAAS,CAAEb,KAAM,iBADO,kBAGhByB,qBAAWnD,EAAOoD,UAHF,uBAIEC,yBAJF,OAKtBC,GADIA,EAJkB,QAKIC,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAZ,MAC3B,CAAED,UAASC,KAAK,2BAAMA,GAAP,IAAaC,KAAK,GAAD,OAAKD,EAAKC,KAAV,aAAmBD,EAAKE,OAAxB,WACnCzC,IAAQ0C,QAAQ,CAAEC,cAAe7D,EAAO8D,qBAAuBR,GAC/Df,EAAS,CAAEb,KAAM,cAAeC,QAAST,MARnB,kDAUtBR,QAAQqD,MAAR,MACAxB,EAAS,CAAEb,KAAM,kBAXK,0DAAH,qDAiBvB,IAFyBF,EAAjBL,aAER,CAEA,GAAIU,EAAW,OAAOU,EAAS,CAAEb,KAAM,cAAeC,QAAST,MAG/DW,GAAY,EACZoB,KAeAe,CAAaxC,EAAOe,GAEb,kBAACT,EAAiBmC,SAAlB,CAA2BC,MAAO1C,GACtCU,EAAMiC,WAULC,EAAe,iCAAYC,qBAAWvC,KChI7BwC,EAXD,CACZC,gBAAiB,CACfC,IAAK,CACH,mBACA,YACA,KAAM,MAAO,MAAO,MAAO,OAC3B,KAAM,MAAO,MAAO,MAAO,U,kBCEjC,SAASC,EAAT,GASI,IAAD,IARDC,mBAQC,MARa,KAQb,EAPDC,EAOC,EAPDA,MACAC,EAMC,EANDA,UAMC,IALDC,aAKC,MALO,OAKP,MAJDC,aAIC,MAJO,KAIP,MAHDpD,YAGC,MAHM,QAGN,MAFDqD,aAEC,MAFO,KAEP,MADDC,gBACC,SAEO5D,EAAQgD,IAARhD,IAFP,EAGyB6D,mBAAS,MAHlC,mBAGMC,EAHN,KAGaC,EAHb,OAI6BF,mBAAS,MAJtC,mBAIMG,EAJN,KAIeC,EAJf,KAMOC,EAAkDP,EAAlDO,UAAWC,EAAuCR,EAAvCQ,SAAUC,EAA6BT,EAA7BS,YAAaC,EAAgBV,EAAhBU,YAGpCC,EAAS,iBAAe,YAAThE,GACfiE,EAAkB,iBAAe,sBAATjE,GAa9BkE,qBAPoB,WAClB,sBAAC,sBAAA1C,EAAA,yDACM9B,EADN,iDAECiE,EAAW,MAFZ,0CAAD,KAMqB,CAACjE,IAExB,IAsKiByE,EAtKXC,EAAW,uCAAG,oCAAA5C,EAAA,yDAEhBM,EAEEkB,EAFFlB,QAFgB,EAIdkB,EADFjB,KAAQE,EAHQ,EAGRA,QAHQ,EAGAoC,WAHA,gCASOC,yBAAerC,GATtB,OASVsC,EATU,OAUhBC,EAAW1C,EACXpC,EAAI+E,UAAUF,EAASG,QAXP,uBAahBF,EAAWxB,EAbK,iCAgBXwB,GAhBW,4CAAH,qDAmBXG,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACnBA,EAAOC,YACH3B,EAAU,uCAAD,OAA8B0B,EAAOE,YAAYC,aAC1D7B,EAAU,+BAAD,OAAgC0B,EAAO5E,QAEhDgF,EAAe,SAAA3D,GAAG,OACtB6B,EAAU,oCAAD,OAA2B7B,EAAI0D,cAEpCE,EAAM,uCAAG,oCAAAzD,EAAA,sEACU4C,IADV,OACPI,EADO,OAEPU,EAAcC,GAAgBpB,EAAaD,GAE3CsB,EAAYF,EACdxF,EAAI2F,GAAGC,KAAKA,MAAK,EAAA5F,EAAI2F,GAAGzB,IAAWC,GAAlB,oBAA+BqB,KAChDxF,EAAI2F,GAAGC,KAAKA,KAAK5F,EAAI2F,GAAGzB,GAAWC,MAEjCL,EAAQ4B,EAAUG,YAAYf,EAAUG,GAC3Ca,MAAMR,GACTvB,GAAS,kBAAMD,KAVF,2CAAH,qDAaNiC,EAAe,uCAAG,kCAAAjE,EAAA,sEACC4C,IADD,OAChBI,EADgB,OAEhBY,EACF1F,EAAI2F,GAAGC,KAAKI,qBAAoB,EAAAhG,EAAI2F,GAAGzB,IAAWC,GAAlB,oBAA+BC,IAAc,GAE3EN,EAAQ4B,EAAUG,YAAYf,EAAUG,GAC3Ca,MAAMR,GACTvB,GAAS,kBAAMD,KAPO,2CAAH,qDAUfmC,EAAQ,uCAAG,oCAAAnE,EAAA,sEACQ4C,IADR,cACTI,EADS,OAETU,EAAcC,GAAgBpB,EAAaD,GAG3CsB,EAAYF,GACd,EAAAxF,EAAI2F,GAAGzB,IAAWC,GAAlB,oBAA+BqB,IAC/BxF,EAAI2F,GAAGzB,GAAWC,KAPP,SASKuB,EAAUG,YAAYf,EAAUG,GACjDa,MAAMR,GAVM,OASTxB,EATS,OAWfC,GAAS,kBAAMD,KAXA,2CAAH,qDAcRoC,EAAU,uCAAG,kCAAApE,EAAA,6DACX0D,EAAcC,GAAgBpB,EAAaD,GAE3CsB,EAAYF,GACd,EAAAxF,EAAI2F,GAAGzB,IAAWC,GAAlB,oBAA+BqB,IAC/BxF,EAAI2F,GAAGzB,GAAWC,KALL,SAOGuB,EAAUS,KAAKlB,GAChCa,MAAMR,GARQ,OAOXxB,EAPW,OASjBC,GAAS,kBAAMD,KATE,2CAAH,qDAYVsC,EAAkB,SAAAC,GAAM,OAC5BA,EAAOC,OAAS9C,EAAU,QAAUA,EAAU6C,EAAOhB,aAEjDkB,EAAK,uCAAG,gCAAAzE,EAAA,6DACN0D,EAAcC,GAAgBpB,EAAaD,GADrC,UAEQ,EAAApE,EAAIuG,MAAMrC,IAAWC,GAArB,oBAAkCqB,GAAlC,QAA+CY,KAFvD,OAENtC,EAFM,OAGZC,GAAS,kBAAMD,KAHH,2CAAH,qDAML1E,EAAG,uCAAG,gCAAA0C,EAAA,6DACJ0D,EAAcC,GAAgBpB,EAAaD,EAAa,CAAEoC,aAAa,IADnE,UAEU,EAAAxG,EAAIZ,IAAI8E,IAAWC,GAAnB,oBAAgCqB,GAAhC,QAA6CY,KAFvD,OAEJtC,EAFI,OAGVC,GAAS,kBAAMD,KAHL,2CAAH,qDAMH2C,EAAW,WACf,IAAMJ,EAASrG,EAAI0G,OAAOxC,GAAWC,GACrCkC,EAAOC,OAAS9C,EAAU,QAAUA,EAAU6C,EAAOhB,aAGjDsB,EAAW,uCAAG,sBAAA7E,EAAA,sDACdgC,IACFA,IACAC,EAAS,OAGXP,EAAU,cAETc,KAAYiB,KACZhB,KAAqBwB,KAtHQ,cAATzF,GAuHN2F,KAxHiB,gBAAT3F,GAyHN4F,KA5HY,UAAT5F,GA6HNiG,KAxHa,QAATjG,GAyHNlB,KAxHoB,aAATkB,GAyHNmG,IAdC,2CAAH,qDAiBXhB,GAAkB,SAACpB,EAAaD,GAA+C,IAAlCwC,EAAiC,uDAA1B,CAAEJ,aAAa,GAGjEK,EAAWzC,EAAYjC,KAAI,SAAA2E,GAE/B,MAA0B,kBAAfA,GAA0C,OAAfA,GAAmD,kBAArBA,EAAWhE,MACtEgE,EAAWhE,MAAMiE,OACO,kBAAfD,EACTA,EAAWC,OAEbD,KAEHE,EAAS3C,EAAYlC,KAAI,SAAC8E,EAAOC,GAAR,mBAAC,eAAqBD,GAAtB,IAA6BnE,MAAO+D,EAASK,IAAQ,UAEpF,OAAOF,EAAO1I,QAAO,SAAC6I,EAAD,GAAuC,IAAD,IAA7B7G,YAA6B,MAAtB,SAAsB,EAAZwC,EAAY,EAAZA,MAC7C,GAAa,MAATA,GAA2B,KAAVA,EAAc,OAAQ8D,EAAKJ,YAAL,sBAAuBW,GAAvB,CAA6B,OAAQA,EAEhF,IAAIC,EAAYtE,EAGhB,OAAIxC,EAAK+G,QAAQ,SAAW,GAE1BD,GADAA,EAAYA,EAAUE,MAAM,KAAKnF,KAAI,SAAAoF,GAAC,OAAIA,EAAER,WACtB5E,KAAI,SAAAqF,GAAM,OAAIC,GAAUnH,GACzCkH,EAAOH,QAAQ,MAAQ,EAAIK,OAAOC,WAAWH,GAAUE,OAAOE,SAASJ,GACxEA,KAEE,GAAN,mBAAWL,GAAX,CAAiBC,MAIfK,GAAUnH,KACZ8G,EAAYA,EAAUC,QAAQ,MAAQ,EAAIK,OAAOC,WAAWP,GAAaM,OAAOE,SAASR,IAErF,GAAN,mBAAWD,GAAX,CAAiBC,OAChB,KAGCK,GAAY,SAAAnH,GAAI,OACpB4C,EAAMC,gBAAgBC,IAAIyE,MAAK,SAAAC,GAAE,OAAIxH,EAAK+G,QAAQS,IAAO,MAoB3D,OACE,kBAACC,EAAA,EAAD,CACEC,OAAK,EACLvE,MAAOA,EACPC,MAAOA,EACPpD,KAAK,SACL2H,QAAStB,EACT/C,SAAWA,IAAaM,IAAcC,KAxBb,IAAvBE,EAAY6D,QAET7D,EAAY8D,OAAM,SAACC,EAAYlB,GACpC,IAAMmB,EAAQjE,EAAY8C,GAC1B,GAAIkB,EAAWE,SAAY,OAAO,EAClC,GAAa,MAATD,EAAiB,OAAO,EAE5B,IAAMvF,EAAyB,kBAAVuF,EAAqBA,EAAMvF,MAAQuF,EACxD,OAAiB,OAAVvF,GAA4B,KAAVA,QAiBrBwB,KAAYC,OAbHE,EAamCnB,IAZ7CU,GAAYS,GACVA,EAASrC,UAAY4B,KAazBT,GAoBP,SAASgF,EAAezH,GACtB,OACE,kBAACiH,EAAA,EAAOS,MAAR,KACE,kBAACnF,EAAD,eACEE,MAAM,WACNjD,KAAK,cACLmD,MAAM,QACF3C,IAEN,kBAACiH,EAAA,EAAOU,GAAR,MACA,kBAACpF,EAAD,eACEE,MAAM,SACNjD,KAAK,YACLmD,MAAM,QACF3C,IAEN,kBAACiH,EAAA,EAAOU,GAAR,MACA,kBAACpF,EAAD,eACEE,MAAM,OACNjD,KAAK,UACLmD,MAAM,OACF3C,KCrQG,SAAS4H,EAAkB5H,GAAQ,IAAD,EACEkC,IAAzChD,EADuC,EACvCA,IAAKE,EADkC,EAClCA,SAAUJ,EADwB,EACxBA,QAASC,EADe,EACfA,aAMhC,MALiB,UAAbG,IAAwBjB,OAAOe,IAAMA,GACpB,UAAjBD,IAA4Bd,OAAOa,QAAUA,GACjDb,OAAO0J,KAAOvK,EAAQ,GACtBa,OAAO2J,WAAaxK,EAAQ,IAErB,K,4DCKT,SAASyK,EAAM/H,GAAQ,IACbhB,EAAYkD,IAAZlD,QACAgJ,EAAsBhI,EAAtBgI,kBAFY,EAG0BjF,mBAAS,IAHnC,mBAGbkF,EAHa,KAGIC,EAHJ,KAMdC,EAAiBnJ,EAAQoJ,WAAW/G,KAAI,SAAAgH,GAAO,MAAK,CACxDlI,IAAKkI,EAAQ/G,QACbU,MAAOqG,EAAQ/G,QACfgH,KAAMD,EAAQ9G,KAAKC,KAAK+G,cACxBC,KAAM,WAGFC,EACJN,EAAef,OAAS,EAAIe,EAAe,GAAGnG,MAAQ,GAGxD0B,qBAAU,WACRsE,EAAkBS,GAClBP,EAAmBO,KAClB,CAACT,EAAmBS,IAQvB,OACE,kBAACC,EAAA,EAAD,CACEC,SAAS,MACTC,SAAO,EACPhG,MAAO,CACLiG,gBAAiB,OACjBC,YAAa,OACbC,WAAY,MACZC,cAAe,QAGjB,kBAACC,EAAA,EAAD,KACE,kBAACP,EAAA,EAAKA,KAAN,KACE,kBAACQ,EAAA,EAAD,CAAOC,IAAG,UAAKvL,gCAAL,8BAAyDwL,KAAK,UAE1E,kBAACV,EAAA,EAAKA,KAAN,CAAWW,SAAS,QAAQzG,MAAO,CAAE0G,WAAY,WAC5CrB,EAWC,KAVA,0DAC0B,IAC1B,uBACEsB,OAAO,SACPC,IAAI,sBACJC,KAAK,4CAHP,0BASJ,kBAAC,kBAAD,CAAiBnB,KAAML,GACrB,kBAAChB,EAAA,EAAD,CACEC,OAAK,EACLwC,UAAQ,EACRN,KAAK,QACLZ,KAAK,OACL7F,MAAOsF,EAAkB,QAAU,SAGvC,kBAAC0B,EAAA,EAAD,CACEtL,QAAM,EACNuL,WAAS,EACTC,WAAS,EACTC,YAAY,oBACZC,QAAS5B,EACT6B,SAAU,SAACC,EAAGC,GAjDP,IAAA5I,IAkDI4I,EAASlI,MAhD5BgG,EAAkB1G,GAClB4G,EAAmB5G,IAiDXU,MAAOiG,IAET,kBAACkC,EAAD,CAAmBlC,gBAAiBA,OAO9C,SAASkC,EAAmBnK,GAAQ,IAC1BiI,EAAoBjI,EAApBiI,gBACA/I,EAAQgD,IAARhD,IAFyB,EAGW6D,mBAAS,GAHpB,mBAG1BqH,EAH0B,KAGVC,EAHU,KAsBjC,OAhBA3G,qBAAU,WACR,IAAI4G,EAYJ,OATArC,GACE/I,EAAIuG,MAAM8E,OAAOlC,QAAQJ,GAAiB,SAAAuC,GACxCH,EAAkBG,EAAQC,KAAKC,KAAKC,cAEnC/J,MAAK,SAAAoC,GACJsH,EAActH,KAEfgC,MAAMxG,QAAQqD,OAEZ,kBAAMyI,GAAeA,OAC3B,CAACpL,EAAK+I,IAEFA,EACL,kBAAC2C,EAAA,EAAD,CAAOC,SAAS,QACd,kBAACC,EAAA,EAAD,CAAMtJ,KAAK,QAAQmB,MAAM,UACxByH,GAED,KAGS,SAASW,EAAiB/K,GAAQ,IAAD,EACrBkC,IAAjBhD,EADsC,EACtCA,IACR,OAF8C,EACjCF,QACEoJ,UAAYlJ,EAAIuG,MAAQ,kBAACsC,EAAS/H,GAAY,K,sBC7HhD,SAAS+H,GAAM/H,GAAQ,IAAD,EACVkC,IAAjBhD,EAD2B,EAC3BA,IAAKF,EADsB,EACtBA,QACPgM,EAAWhM,EAAQoJ,WAFU,EAGHrF,mBAAS,IAHN,mBAG5BkI,EAH4B,KAGlBC,EAHkB,KAsBnC,OAjBAxH,qBAAU,WACR,IAAMyH,EAAYnM,EAAQoJ,WAAW/G,KAAI,SAAAgH,GAAO,OAAIA,EAAQ/G,WACxD8J,EAAiB,KAYrB,OAVAlM,EAAIuG,MAAM8E,OAAOlC,QACdgD,MAAMF,GAAW,SAAAF,GAChB,IAAMK,EAAcH,EAAU3N,QAAO,SAAC+N,EAAKjK,EAASkK,GAAf,mBAAC,eACjCD,GADgC,kBAC1BjK,EAAU2J,EAASO,GAAOf,KAAKC,KAAKC,cAC3C,IACJO,EAAYI,MACX1K,MAAK,SAAAoC,GACNoI,EAAiBpI,KAChBgC,MAAMxG,QAAQqD,OAEZ,kBAAMuJ,GAAkBA,OAC9B,CAAClM,EAAKF,EAASkM,IAGhB,kBAACO,EAAA,EAAKC,OAAN,KACE,wCACA,kBAACC,EAAA,EAAD,CAAOC,QAAM,EAACC,SAAO,EAACzC,KAAK,SACzB,kBAACuC,EAAA,EAAMG,KAAP,KAAad,EAAS3J,KAAI,SAAAgH,GAAO,OAC/B,kBAACsD,EAAA,EAAMI,IAAP,CAAW5L,IAAKkI,EAAQ/G,SACtB,kBAACqK,EAAA,EAAMK,KAAP,CAAYC,MAAO,EAAGC,UAAU,SAAS7D,EAAQ9G,KAAKC,MACtD,kBAACmK,EAAA,EAAMK,KAAP,CAAYC,MAAO,IACjB,0BAAMrJ,MAAO,CAAEuJ,QAAS,eAAgBC,SAAU,SAC/C/D,EAAQ/G,SAEX,kBAAC,kBAAD,CAAiBgH,KAAMD,EAAQ/G,SAC7B,kBAAC2F,EAAA,EAAD,CACEC,OAAK,EACLwC,UAAQ,EACR2C,SAAO,EACPjD,KAAK,OACLzG,MAAM,OACN6F,KAAK,mBAIX,kBAACmD,EAAA,EAAMK,KAAP,CAAYC,MAAO,GACjBhB,GAAYA,EAAS5C,EAAQ/G,UAC7B2J,EAAS5C,EAAQ/G,iB,0BC9C/B,SAASyG,GAAM/H,GAAQ,IACbd,EAAQgD,IAARhD,IACAoN,EAActM,EAAdsM,UAFY,EAGkBvJ,mBAAS,GAH3B,mBAGbwJ,EAHa,KAGAC,EAHA,OAI4BzJ,mBAAS,GAJrC,mBAIb0J,EAJa,KAIKC,EAJL,KAMdC,EAAaL,EACfpN,EAAI0N,OAAOC,MAAMC,oBACjB5N,EAAI0N,OAAOC,MAAMF,WAErBjJ,qBAAU,WACR,IAAI0H,EAAiB,KAWrB,OATAuB,GAAW,SAAAI,GACTP,EAAeO,EAAOC,YACtBN,EAAoB,MAEnB9L,MAAK,SAAAoC,GACJoI,EAAiBpI,KAElBgC,MAAMxG,QAAQqD,OAEV,kBAAMuJ,GAAkBA,OAC9B,CAACuB,IAEJ,IAAMM,EAAQ,WACZP,GAAoB,SAAAQ,GAAI,OAAIA,EAAO,MAQrC,OALAxJ,qBAAU,WACR,IAAMyJ,EAAKC,YAAYH,EAAO,KAC9B,OAAO,kBAAMI,cAAcF,MAC1B,IAGD,kBAAC1B,EAAA,EAAKC,OAAN,KACE,kBAAC4B,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,QAAN,CAAcrB,UAAU,UACtB,kBAACsB,GAAA,EAAD,CACE/K,OAAQ6J,EAAY,YAAc,WAAa,SAC/CtK,MAAOuK,KAGX,kBAACe,GAAA,EAAKC,QAAN,CAAcE,OAAK,GACjB,kBAAC3C,EAAA,EAAD,CAAMtJ,KAAK,SADb,IACwBiL,KAOjB,SAASiB,GAAa1N,GAAQ,IACnCd,EAAQgD,IAARhD,IACR,OAAOA,EAAI0N,QACT1N,EAAI0N,OAAOC,OACX3N,EAAI0N,OAAOC,MAAMF,YACjBzN,EAAI0N,OAAOC,MAAMC,oBACf,kBAAC,GAAS9M,GACR,K,eCzDF2N,GAAkB,CACtB,yDACA,0DAGF,SAAS5F,GAAM/H,GAAQ,IACbd,EAAQgD,IAARhD,IADY,EAEc6D,mBAAS,IAFvB,mBAEb6K,EAFa,KAEFC,EAFE,KAIpBnK,qBAAU,WACR,IAAIV,EAAQ,KAgCZ,OA/Be,uCAAG,sBAAAhC,EAAA,sEACF9B,EAAIuG,MAAM8E,OAAOuD,QAAO,SAAAA,GAEpCA,EAAO5N,SAAQ,SAAA6N,GAAU,IAEfC,EAAiBD,EAAjBC,MAAOC,EAAUF,EAAVE,MACTnP,EAAQkP,EAAME,QAGdC,EAAS,UAAMH,EAAMI,QAAZ,YACbJ,EAAMK,OADO,qBAEFJ,EAAM1J,WAFJ,KAIf,IAAIoJ,GAAgBW,SAASH,GAA7B,CAGA,IAAMjI,EAAS8H,EAAMvD,KAAKpJ,KACxB,SAACoJ,EAAMe,GAAP,gBAAoB1M,EAAM0M,GAAOhM,KAAjC,aAA0CiL,EAAKlG,eAGjDsJ,GAAa,SAAApH,GAAC,OAAK,CACjB+B,KAAM,OACN+F,QAAQ,GAAD,OAAKJ,EAAL,YAAkB1H,EAAEW,QAC3BoH,UAAWR,EAAMzM,KAAKkN,cAAcC,KAAK,MAAMnK,WAC/CoK,QAASzI,EAAOwI,KAAK,QAJT,mBAKRjI,cAzBM,OAChBzD,EADgB,kDAAH,oDA8Bf4L,GACO,kBAAM5L,GAASA,OACrB,CAAC9D,EAAIuG,MAAM8E,SAtCM,MAwCYvK,EAAxB6O,qBAxCY,MAwCI,IAxCJ,EA0CpB,OACE,kBAACpD,EAAA,EAAKC,OAAN,CAAaO,MAAO,GAClB,wBAAIrJ,MAAO,CAAEkM,MAAO,SAApB,UACA,kBAAC7H,EAAA,EAAD,CACEC,OAAK,EAACwC,UAAQ,EACdN,KAAK,OACLzG,MAAM,OACNoM,QAAQ,QACRvG,KAAK,QACLrB,QAAU,SAAA8C,GAAC,OAAI4D,EAAa,OAE9B,kBAACmB,GAAA,EAAD,CAAMpM,MAAO,CAAEqM,MAAO,OAAQC,SAAU,OAAQC,UAAWN,GAAiBf,OAAQF,KAK3E,SAASwB,GAAQpP,GAAQ,IAC9Bd,EAAQgD,IAARhD,IACR,OAAOA,EAAIuG,OAASvG,EAAIuG,MAAM8E,QAAUrL,EAAIuG,MAAM8E,OAAOuD,OACvD,kBAAC,GAAS9N,GACR,K,0BCnEAqP,GAAgB,SAACC,GAAD,OACpBA,EAAI9P,KAAK+E,WAAWgL,WAAW,YAEjC,SAASxH,GAAM/H,GAAQ,IAAD,EACKkC,IAAjBhD,EADY,EACZA,IAAKN,EADO,EACPA,QACL4D,EAAgBxC,EAAhBwC,YAFY,EAGQO,mBAAS,MAHjB,mBAGbqB,EAHa,KAGL1B,EAHK,OAKgBK,mBAAS,aALzB,mBAKbyM,EALa,KAKDC,EALC,OAMgB1M,mBAAS,IANzB,mBAMb2M,EANa,KAMDC,EANC,OAOc5M,mBAAS,IAPvB,mBAOb6M,EAPa,KAOFC,EAPE,OAQkB9M,mBAAS,IAR3B,mBAQbQ,EARa,KAQAuM,EARA,KAUdC,EAAgB,CACpB3M,UAAW,GACXC,SAAU,GACVC,YAAa,IAbK,EAgBcP,mBAASgN,GAhBvB,mBAgBbC,EAhBa,KAgBFC,EAhBE,KAiBZ7M,EAAqC4M,EAArC5M,UAAWC,EAA0B2M,EAA1B3M,SAAUC,EAAgB0M,EAAhB1M,YAEvB4M,EAAa,SAAChR,EAAKsQ,GACvB,MAAmB,UAAfA,EACKtQ,EAAIuG,MACa,cAAf+J,EACFtQ,EAAI2F,GACa,QAAf2K,EACFtQ,EAAIZ,IAEJY,EAAI0G,QAgFflC,qBA5EyB,WACvB,GAAKxE,EAAL,CACA,IAAMiR,EAAUD,EAAWhR,EAAKsQ,GAC1BE,EAAaU,OAAOC,KAAKF,GAASG,OACrCC,QAAO,SAAAC,GAAE,OAAIJ,OAAOC,KAAKF,EAAQK,IAAKpJ,OAAS,KAC/C/F,KAAI,SAAAmP,GAAE,MAAK,CAAErQ,IAAKqQ,EAAIxO,MAAOwO,EAAIlI,KAAMkI,MAC1Cb,EAAcD,MAsEY,CAACxQ,EAAKsQ,IAClC9L,qBApEwB,WACtB,GAAKxE,GAAqB,KAAdkE,EAAZ,CACA,IAAMwM,EAAYQ,OAAOC,KAAKH,EAAWhR,EAAKsQ,GAAYpM,IAAYkN,OACnEjP,KAAI,SAAAoP,GAAC,MAAK,CAAEtQ,IAAKsQ,EAAGzO,MAAOyO,EAAGnI,KAAMmI,MACvCZ,EAAaD,MAgEY,CAAC1Q,EAAKsQ,EAAYpM,IAC7CM,qBA9D0B,WACxB,GAAKxE,GAAqB,KAAdkE,GAAiC,KAAbC,EAAhC,CAKA,IAAIE,EAAc,GAElB,GAAmB,UAAfiM,EAAwB,CAC1B,IAAMkB,EAAWxR,EAAIuG,MAAMrC,GAAWC,GAAU9B,KAAK/B,KACjDkR,EAASC,UAEFD,EAASE,MAClBrN,EAAc,CAAC,CACb/B,KAAMkP,EAASG,MAAM1Q,IAAIoE,WACzB/E,KAAMkR,EAASG,MAAM1Q,IAAIoE,WACzBiD,UAAU,IAEHkJ,EAASI,cAClBvN,EAAc,CAAC,CACb/B,KAAMkP,EAASK,YAAYC,KAAKzM,WAChC/E,KAAMkR,EAASK,YAAYC,KAAKzM,WAChCiD,UAAU,GACT,CACDhG,KAAMkP,EAASK,YAAYE,KAAK1M,WAChC/E,KAAMkR,EAASK,YAAYE,KAAK1M,WAChCiD,UAAU,WAGT,GAAmB,cAAfgI,EAA4B,CACrC,IAAM0B,EAAWhS,EAAI2F,GAAGzB,GAAWC,GAAU9B,KAAK4P,KAE9CD,GAAYA,EAAS9J,OAAS,IAChC7D,EAAc2N,EAAS7P,KAAI,SAAAiO,GAAG,MAAK,CACjC9N,KAAM8N,EAAI9N,KAAK+C,WACf/E,KAAM8P,EAAI9P,KAAK+E,WACfiD,SAAU6H,GAAcC,aAGvB,GAAmB,QAAfE,EAAsB,CAC/B,IAAI4B,EAAY,GAEZxS,EAAQwE,IAAcxE,EAAQwE,GAAWC,KAC3C+N,EAAYxS,EAAQwE,GAAWC,GAAU6C,QAGvCkL,EAAUhK,OAAS,IACrB7D,EAAc6N,EAAU/P,KAAI,SAAAiO,GAAG,MAAK,CAClC9N,KAAM8N,EAAI9N,KACVhC,KAAM8P,EAAI9P,KACVgI,SAAU8H,EAAI+B,aAAc,WAGR,aAAf7B,IACTjM,EAAc,IAGhBuM,EAAevM,QAvDbuM,EAAe,MA4DU,CAAC5Q,EAAKsQ,EAAYpM,EAAWC,IAE1D,IAAMiO,EAA8B,SAACrH,EAAGQ,GACtCwF,GAAa,SAAAD,GACX,IAAIuB,EACIjS,EAAiBmL,EAAjBnL,MAAO0C,EAAUyI,EAAVzI,MACf,GAAqB,kBAAV1C,EAAoB,KAErB8G,EAA8B9G,EAA9B8G,IAAmB5G,EAAWF,EAAzBgI,WAAc9H,KACrB8D,EAAW,YAAO0M,EAAU1M,aAClCA,EAAY8C,GAAO,CAAE5G,OAAMwC,SAC3BuP,EAAG,2BAAQvB,GAAR,IAAmB1M,qBACjB,GAAc,cAAVhE,EAAuB,CAAC,IAAD,EAChCiS,EAAG,2BAAQvB,GAAR,uBAAoB1Q,EAAQ0C,GAA5B,yBAA6C,IAA7C,4BAA8D,IAA9D,SACE,GAAc,aAAV1C,EAAsB,CAAC,IAAD,EAC/BiS,EAAG,2BAAQvB,GAAR,uBAAoB1Q,EAAQ0C,GAA5B,4BAAgD,IAAhD,IAEL,OAAOuP,MAILC,EAAqB,SAACC,EAAIhH,GAC9BgF,EAAchF,EAAKzI,OAEnBiO,EAAaF,IAGT2B,EAAiB,SAAClC,GAAD,MACN,QAAfA,EACI,qBACA,wDAEN,OACE,kBAAC/D,EAAA,EAAKC,OAAN,CAAaO,MAAO,GAClB,iDACA,kBAAC0F,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKjK,MAAN,CAAY9E,MAAO,CAAEgP,UAAW,QAAUC,QAAM,GAC9C,mDACA,kBAACF,GAAA,EAAKG,MAAN,CACErP,MAAM,YACNjB,KAAK,aACLQ,MAAM,YACN+P,QAAwB,cAAfvC,EACTxF,SAAUwH,IAEZ,kBAACG,GAAA,EAAKG,MAAN,CACErP,MAAM,QACNjB,KAAK,aACLQ,MAAM,QACN+P,QAAwB,UAAfvC,EACTxF,SAAUwH,IAEZ,kBAACG,GAAA,EAAKG,MAAN,CACErP,MAAM,MACNjB,KAAK,aACLQ,MAAM,MACN+P,QAAwB,QAAfvC,EACTxF,SAAUwH,IAEZ,kBAACG,GAAA,EAAKG,MAAN,CACErP,MAAM,WACNjB,KAAK,aACLQ,MAAM,WACN+P,QAAwB,aAAfvC,EACTxF,SAAUwH,KAGd,kBAACG,GAAA,EAAKK,MAAN,KACE,kBAACrI,EAAA,EAAD,CACEG,YAAY,gBACZmI,OAAK,EACLxP,MAAM,eACNuH,SAAUsH,EACVjT,QAAM,EACNuL,WAAS,EACTtK,MAAM,YACN0C,MAAOoB,EACP2G,QAAS2F,KAGb,kBAACiC,GAAA,EAAKK,MAAN,KACE,kBAACrI,EAAA,EAAD,CACEG,YAAY,YACZmI,OAAK,EACLxP,MAAM,WACNuH,SAAUsH,EACVjT,QAAM,EACNuL,WAAS,EACTtK,MAAM,WACN0C,MAAOqB,EACP0G,QAAS6F,KAGZrM,EAAYlC,KAAI,SAACiG,EAAYlB,GAAb,OACf,kBAACuL,GAAA,EAAKK,MAAN,CAAY7R,IAAG,UAAKmH,EAAW9F,KAAhB,YAAwB8F,EAAW9H,OAChD,kBAAC0S,GAAA,EAAD,CACEpI,YAAaxC,EAAW9H,KACxByS,OAAK,EACLzS,KAAK,OACLiD,MAAO6E,EAAW9F,KAClBlC,MAAO,CAAE8G,MAAKkB,cACdtF,MAAQsB,EAAY8C,GAAO9C,EAAY8C,GAAKpE,MAAQ,GACpDgI,SAAUsH,IAEVhK,EAAWE,SACT,kBAACoD,EAAA,EAAD,CACA1D,OAAK,EACL2D,UAAQ,EACRlI,MAAM,OACNgM,QAAY+C,EAAelC,KAE3B,SAIR,kBAACmC,GAAA,EAAKK,MAAN,CAAYpP,MAAO,CAAEsJ,UAAW,WAC9B,kBAACiG,GAAD,CACE3P,YAAaA,EACbE,UAAWA,EACXG,MAAO,CAAE2M,aAAYpM,YAAWC,WAAUC,cAAaC,kBAG3D,yBAAKX,MAAO,CAAEwP,aAAc,eAAiBhO,KAMrD,SAAS+N,GAAkBnS,GAAQ,IAChBwP,EAAiBxP,EAA1B6C,MAAS2M,WACjB,MAAmB,UAAfA,EACK,kBAACjN,EAAD,eACLE,MAAQ,QACRjD,KAAO,QACPmD,MAAQ,QACJ3C,IAEkB,cAAfwP,EACF,kBAAC/H,EAAkBzH,GACF,QAAfwP,GAAuC,aAAfA,EAC1B,kBAACjN,EAAD,eACLE,MAAQ,SACRjD,KAAQgQ,EACR7M,MAAQ,QACJ3C,SALD,EAUM,SAASqS,GAAYrS,GAElC,OADgBkC,IAARhD,IACG2F,GAAK,kBAAC,GAAS7E,GAAY,K,eCxQxC,SAAS+H,GAAM/H,GAAQ,IACbd,EAAQgD,IAARhD,IADY,EAEY6D,mBAAS,CAAE0H,KAAM,KAAM6H,QAAS,OAF5C,mBAEbC,EAFa,KAEHC,EAFG,KAgBpB,OAZA9O,qBAAU,YACS,uCAAG,4BAAA1C,EAAA,+EAEG9B,EAAIZ,IAAIgB,MAAMmT,cAFjB,OAEVhI,EAFU,OAGhB+H,EAAY,CAAE/H,OAAM6H,QAAS7H,EAAK6H,UAHlB,gDAKhB9T,QAAQqD,MAAR,MALgB,yDAAH,qDAQjB4Q,KACC,CAACvT,EAAIZ,IAAIgB,QAGV,kBAACmM,EAAA,EAAKC,OAAN,KACE,kBAAC4B,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,QAAN,KACE,kBAACD,GAAA,EAAKoF,OAAN,iBACA,kBAACpF,GAAA,EAAKqF,KAAN,KACE,kCAAQJ,EAASD,WAGrB,kBAAChF,GAAA,EAAKC,QAAN,CAAcE,OAAK,GACjB,kBAACmF,GAAA,EAAD,CAAOC,QAAS,kBAAC5L,EAAA,EAAD,uBACd,kBAAC2L,GAAA,EAAMF,OAAP,yBACA,kBAACE,GAAA,EAAMrF,QAAP,CAAeuF,WAAS,GACtB,kBAACF,GAAA,EAAMG,YAAP,KACE,6BACE,8BAAOC,KAAKC,UAAUV,EAAS9H,KAAM,KAAM,WAW9C,SAASyI,GAAUlT,GAAQ,IAChCd,EAAQgD,IAARhD,IACR,OAAOA,EAAIZ,KAAOY,EAAIZ,IAAIgB,OAASJ,EAAIZ,IAAIgB,MAAMmT,YAC/C,kBAAC,GAASzS,GACR,KC9CN,SAAS+H,GAAM/H,GAAQ,IACbd,EAAQgD,IAARhD,IADY,EAEY6D,mBAAS,IAFrB,mBAEboQ,EAFa,KAEHC,EAFG,KAoBpB,OAhBA1P,qBAAU,YACK,uCAAG,oCAAA1C,EAAA,+EAEiCqS,QAAQC,IAAI,CACvDpU,EAAIZ,IAAIiM,OAAOsC,QACf3N,EAAIZ,IAAIiM,OAAO/I,OACftC,EAAIZ,IAAIiM,OAAO+H,YALL,mCAELzF,EAFK,KAEE0G,EAFF,KAEYC,EAFZ,KAOZJ,EAAY,CAAEvG,QAAO0G,WAAUC,gBAPnB,kDASZhV,QAAQqD,MAAR,MATY,0DAAH,qDAYb4R,KACC,CAACvU,EAAIZ,IAAIiM,SAGV,kBAACkB,EAAA,EAAKC,OAAN,KACE,kBAAC4B,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,QAAN,KACE,kBAACD,GAAA,EAAKoF,OAAN,KAAcS,EAASI,UACvB,kBAACjG,GAAA,EAAKqF,KAAN,KACE,8BAAOQ,EAAStG,QAElB,kBAACS,GAAA,EAAKyF,YAAN,uBACkB,IAChB,uBAAGtJ,KAAK,2EAAR,kCAKJ,kBAAC6D,GAAA,EAAKC,QAAN,CAAcE,OAAK,GACjB,kBAAC3C,EAAA,EAAD,CAAMtJ,KAAK,YADb,IAC2B2R,EAASK,eAO7B,SAASE,GAAU1T,GAAQ,IAChCd,EAAQgD,IAARhD,IACR,OAAOA,EAAIZ,KACTY,EAAIZ,IAAIiM,QACRrL,EAAIZ,IAAIiM,OAAOsC,OACf3N,EAAIZ,IAAIiM,OAAO/I,MACftC,EAAIZ,IAAIiM,OAAO+H,QACb,kBAAC,GAAStS,GACR,KClDR,SAAS+H,GAAM/H,GAAQ,IACbd,EAAQgD,IAARhD,IACAsD,EAAgBxC,EAAhBwC,YAFY,EAKQO,mBAAS,IALjB,mBAKbqB,EALa,KAKL1B,EALK,OAQoBK,mBAAS,GAR7B,mBAQb4Q,EARa,KAQCC,EARD,OASc7Q,mBAAS,GATvB,mBASb8Q,EATa,KASFC,EATE,KA8BpB,OAnBApQ,qBAAU,WACR,IAAI4G,EAeJ,OAdApL,EAAIuG,MAAMsO,eAAeC,WAAU,SAAAC,GAI7BA,EAASzO,OACXoO,EAAgB,UAEhBA,EAAgBK,EAASC,SAASlH,eAEnCpM,MAAK,SAAAoC,GACNsH,EAActH,KAEbgC,MAAMxG,QAAQqD,OAEV,kBAAMyI,GAAeA,OAC3B,CAACpL,EAAIuG,MAAMsO,iBAGZ,kBAACtI,EAAA,EAAKC,OAAN,CAAaO,MAAO,GAClB,+CACA,kBAACqB,GAAA,EAAD,CAAM6G,UAAQ,GACZ,kBAAC7G,GAAA,EAAKC,QAAN,CAAcrB,UAAU,UACtB,kBAACsB,GAAA,EAAD,CACE/K,MAAM,gBACNT,MAAO2R,MAIb,kBAAChC,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKK,MAAN,KACE,kBAACE,GAAA,EAAD,CACEzP,MAAM,YACNnD,MAAM,WACNE,KAAK,SACLwK,SAAU,SAACC,EAAD,OAAMjI,EAAN,EAAMA,MAAN,OAAkB8R,EAAa9R,OAG7C,kBAAC2P,GAAA,EAAKK,MAAN,CAAYpP,MAAO,CAAEsJ,UAAW,WAC9B,kBAAC3J,EAAD,CACEC,YAAaA,EACbC,MAAM,kBACNjD,KAAK,YACLkD,UAAWA,EACXG,MAAO,CACLO,UAAW,iBACXC,SAAU,cACVC,YAAa,CAACuQ,GACdtQ,YAAa,EAAC,OAIpB,yBAAKX,MAAO,CAAEwP,aAAc,eAAiBhO,KAMtC,SAASgQ,GAAgBpU,GAAQ,IACtCd,EAAQgD,IAARhD,IACR,OAAQA,EAAIuG,MAAMsO,gBAAkB7U,EAAIuG,MAAMsO,eAAeC,UACzD,kBAAC,GAAShU,GAAY,KC3Eb,SAAS+H,GAAM/H,GAAQ,IAAD,EACP+C,mBAAS,MADF,mBAC5BqB,EAD4B,KACpB1B,EADoB,OAEDK,mBAAS,CAAEsR,UAAW,KAAMC,OAAQ,IAFnC,mBAE5BtE,EAF4B,KAEjBC,EAFiB,KAG3BzN,EAAgBxC,EAAhBwC,YAEFwH,EAAW,SAACC,EAAGQ,GAAJ,OACfwF,GAAa,SAAAsE,GAAI,kCAAUA,GAAV,kBAAiB9J,EAAKnL,MAAQmL,EAAKzI,YAE9CqS,EAAsBrE,EAAtBqE,UAAWC,EAAWtE,EAAXsE,OAEnB,OACE,kBAAC7I,EAAA,EAAKC,OAAN,CAAaO,MAAO,GAClB,wCACA,kBAAC0F,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKK,MAAN,KACE,kBAACpH,EAAA,EAAD,CAAO1D,OAAK,EAACvE,MAAM,QACjB,kBAACmI,EAAA,EAAD,CAAMtJ,KAAK,qBADb,2BAKF,kBAACmQ,GAAA,EAAKK,MAAN,6EACA,kBAACL,GAAA,EAAKK,MAAN,KACE,kBAACE,GAAA,EAAD,CACED,OAAK,EACLxP,MAAM,KACNjD,KAAK,OACLsK,YAAY,UACZxK,MAAM,YACN0K,SAAUA,KAGd,kBAAC2H,GAAA,EAAKK,MAAN,KACE,kBAACE,GAAA,EAAD,CACED,OAAK,EACLxP,MAAM,SACNjD,KAAK,SACLF,MAAM,SACN0K,SAAUA,KAGd,kBAAC2H,GAAA,EAAKK,MAAN,CAAYpP,MAAO,CAAEsJ,UAAW,WAC9B,kBAAC3J,EAAD,CACEC,YAAaA,EACbC,MAAM,SACNjD,KAAK,YACLkD,UAAWA,EACXG,MAAO,CACLO,UAAW,WACXC,SAAU,WACVC,YAAa,CAAC+Q,EAAWC,GACzB/Q,YAAa,EAAC,GAAM,OAI1B,yBAAKX,MAAO,CAAEwP,aAAc,eAAiBhO,KCtDtC,SAAS2D,GAAM/H,GAAQ,IAAD,EACP+C,mBAAS,IADF,mBAC5BqB,EAD4B,KACpB1B,EADoB,OAEHK,mBAAS,IAFN,mBAE5ByR,EAF4B,KAElBC,EAFkB,KAG3BjS,EAAgBxC,EAAhBwC,YAQFkS,EAAmB,SAAAC,GACvB,IAAMC,EAAa,IAAIC,WACvBD,EAAWE,UAAY,SAAArO,GACrB,IATgBsO,EASVpG,GATUoG,EASYH,EAAWrP,OARlCyP,MAAMC,KAAK,IAAIC,WAAWH,IAC9B1T,KAAI,SAAA8T,GAAC,OAAIA,EAAE5Q,SAAS,IAAI6Q,SAAS,EAAG,QACpC1G,KAAK,KAON+F,EAAY,KAAD,OAAM9F,KAGnBiG,EAAWS,kBAAkBV,IAG/B,OACE,kBAAClJ,EAAA,EAAKC,OAAN,CAAaO,MAAO,GAClB,+CACA,kBAAC0F,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKK,MAAN,KACE,kBAACE,GAAA,EAAD,CACE1S,KAAK,OACL2N,GAAG,OACH1K,MAAM,YACN6S,OAAO,QACPtL,SAAU,SAAAvD,GAAC,OAAIiO,EAAiBjO,EAAE8C,OAAOgM,MAAM,QAGnD,kBAAC5D,GAAA,EAAKK,MAAN,CAAYpP,MAAO,CAAEsJ,UAAW,WAC9B,kBAAC3J,EAAD,CACEC,YAAaA,EACbC,MAAM,UACNjD,KAAK,oBACLkD,UAAWA,EACXG,MAAO,CACLO,UAAW,SACXC,SAAU,UACVC,YAAa,CAACkR,GACdjR,YAAa,EAAC,OAIpB,yBAAKX,MAAO,CAAEwP,aAAc,eAAiBhO,KClCrD,SAAS2D,KAAS,IAaAlH,EAbD,EAC6BkC,mBAAS,MADtC,mBACRyS,EADQ,KACQxN,EADR,OAEuC9F,IAA9C9C,EAFO,EAEPA,SAAUJ,EAFH,EAEGA,QAASC,EAFZ,EAEYA,aAAcE,EAF1B,EAE0BA,SACnCqD,EACJgT,GACiB,UAAjBvW,GACAD,EAAQyW,QAAQD,GAEZE,EAAS,SAAApN,GAAI,OACjB,kBAACqN,EAAA,EAAD,CAAQC,QAAM,GACZ,kBAACC,EAAA,EAAD,CAAQzM,KAAK,SAASd,KAa1B,GAAiB,UAAblJ,EAAsB,OAVVyB,EAUyB1B,EATvC,kBAACsM,EAAA,EAAD,CAAM0I,UAAQ,EAAC2B,QAAS,EAAGC,QAAM,GAC/B,kBAACtK,EAAA,EAAKC,OAAN,KACE,kBAACsK,EAAA,EAAD,CAASC,UAAQ,EAAC5J,SAAO,EAAC6J,UAAQ,EAChCC,OAAO,gCACPxH,QAAO,UAAKqE,KAAKC,UAAUpS,EAAI,KAAK,QAMvC,GAAiB,UAAbzB,EAAsB,OAAOsW,EAAO,2BAE7C,GAAqB,UAAjBzW,EACF,OAAOyW,EAAO,kEAGhB,IAAMU,EAAaC,sBAEnB,OACE,yBAAKC,IAAKF,GACR,kBAACG,EAAA,EAAD,CAAQC,QAASJ,GACf,kBAACrL,EAAD,CAAiB/C,kBAAmBA,KAEtC,kBAACiB,EAAA,EAAD,KACE,kBAACwC,EAAA,EAAD,CAAMgL,WAAS,EAACX,QAAQ,SACtB,kBAACrK,EAAA,EAAKM,IAAN,CAAU2K,WAAS,GACjB,kBAAChD,GAAD,MACA,kBAACR,GAAD,MACA,kBAACxF,GAAD,MACA,kBAACA,GAAD,CAAapB,WAAS,KAExB,kBAACb,EAAA,EAAKM,IAAN,CAAU2K,WAAS,GACjB,kBAAC,GAAD,OAEF,kBAACjL,EAAA,EAAKM,IAAN,KACE,kBAAC,GAAD,CAAUvJ,YAAaA,IACvB,kBAAC,GAAD,CAASA,YAAaA,KAExB,kBAACiJ,EAAA,EAAKM,IAAN,KACE,kBAACsG,GAAD,CAAY7P,YAAaA,IACzB,kBAAC4M,GAAD,OAEF,kBAAC3D,EAAA,EAAKM,IAAN,KACE,kBAACqI,GAAD,CAAgB5R,YAAaA,OAInC,kBAACoF,EAAD,OAKS,SAAS+O,KACtB,OACE,kBAAC,EAAD,KACE,kBAAC,GAAD,OClFNC,IAASC,OAAO,kBAACF,GAAD,MACdG,SAASC,eAAe,U","file":"static/js/main.6f905cef.chunk.js","sourcesContent":["import configCommon from './common.json';\n// Using `require` as `import` does not support dynamic loading (yet).\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\n\n// Accepting React env vars and aggregating them into `config` object.\nconst envVarNames = [\n  'REACT_APP_PROVIDER_SOCKET',\n  'REACT_APP_DEVELOPMENT_KEYRING'\n];\nconst envVars = envVarNames.reduce((mem, n) => {\n  // Remove the `REACT_APP_` prefix\n  if (process.env[n] !== undefined) mem[n.slice(10)] = process.env[n];\n  return mem;\n}, {});\n\nconst config = { ...configCommon, ...configEnv, ...envVars };\nexport default config;\n","import React, { useReducer, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport jsonrpc from '@polkadot/types/interfaces/jsonrpc';\nimport queryString from 'query-string';\n\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\n\nimport config from '../config';\n\nconst parsedQuery = queryString.parse(window.location.search);\nconst connectedSocket = parsedQuery.rpc || config.PROVIDER_SOCKET;\nconsole.log(`Connected socket: ${connectedSocket}`);\n\n///\n// Initial state for `useReducer`\n\nconst INIT_STATE = {\n  socket: connectedSocket,\n  jsonrpc: { ...jsonrpc, ...config.RPC },\n  types: config.CUSTOM_TYPES,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiError: null,\n  apiState: null\n};\n\n///\n// Reducer function for `useReducer`\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CONNECT_INIT':\n      return { ...state, apiState: 'CONNECT_INIT' };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR', apiError: action.payload };\n\n    case 'LOAD_KEYRING':\n      return { ...state, keyringState: 'LOADING' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\n///\n// Connecting to the Substrate node\n\nconst connect = (state, dispatch) => {\n  const { apiState, socket, jsonrpc, types } = state;\n  // We only want this function to be performed once\n  if (apiState) return;\n\n  dispatch({ type: 'CONNECT_INIT' });\n\n  const provider = new WsProvider(socket);\n  const _api = new ApiPromise({ provider, types, rpc: jsonrpc });\n\n  // Set listeners for disconnection and reconnection event.\n  _api.on('connected', () => {\n    dispatch({ type: 'CONNECT', payload: _api });\n    // `ready` event is not emitted upon reconnection and is checked explicitly here.\n    _api.isReady.then((_api) => dispatch({ type: 'CONNECT_SUCCESS' }));\n  });\n  _api.on('ready', () => dispatch({ type: 'CONNECT_SUCCESS' }));\n  _api.on('error', err => dispatch({ type: 'CONNECT_ERROR', payload: err }));\n};\n\n///\n// Loading accounts from dev and polkadot-js extension\n\nlet loadAccts = false;\nconst loadAccounts = (state, dispatch) => {\n  const asyncLoadAccounts = async () => {\n    dispatch({ type: 'LOAD_KEYRING' });\n    try {\n      await web3Enable(config.APP_NAME);\n      let allAccounts = await web3Accounts();\n      allAccounts = allAccounts.map(({ address, meta }) =>\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: 'KEYRING_ERROR' });\n    }\n  };\n\n  const { keyringState } = state;\n  // If `keyringState` is not null `asyncLoadAccounts` is running.\n  if (keyringState) return;\n  // If `loadAccts` is true, the `asyncLoadAccounts` has been run once.\n  if (loadAccts) return dispatch({ type: 'SET_KEYRING', payload: keyring });\n\n  // This is the heavy duty work\n  loadAccts = true;\n  asyncLoadAccounts();\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n\n  const [state, dispatch] = useReducer(reducer, initState);\n  connect(state, dispatch);\n  loadAccounts(state, dispatch);\n\n  return <SubstrateContext.Provider value={state}>\n    {props.children}\n  </SubstrateContext.Provider>;\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\n\nconst useSubstrate = () => ({ ...useContext(SubstrateContext) });\n\nexport { SubstrateContextProvider, useSubstrate };\n","const utils = {\n  paramConversion: {\n    num: [\n      'Compact<Balance>',\n      'BalanceOf',\n      'u8', 'u16', 'u32', 'u64', 'u128',\n      'i8', 'i16', 'i32', 'i64', 'i128'\n    ]\n  }\n};\n\nexport default utils;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\nimport { web3FromSource } from '@polkadot/extension-dapp';\n\nimport { useSubstrate } from '../';\nimport utils from '../utils';\n\nfunction TxButton ({\n  accountPair = null,\n  label,\n  setStatus,\n  color = 'blue',\n  style = null,\n  type = 'QUERY',\n  attrs = null,\n  disabled = false\n}) {\n  // Hooks\n  const { api } = useSubstrate();\n  const [unsub, setUnsub] = useState(null);\n  const [sudoKey, setSudoKey] = useState(null);\n\n  const { palletRpc, callable, inputParams, paramFields } = attrs;\n\n  const isQuery = () => type === 'QUERY';\n  const isSudo = () => type === 'SUDO-TX';\n  const isUncheckedSudo = () => type === 'UNCHECKED-SUDO-TX';\n  const isUnsigned = () => type === 'UNSIGNED-TX';\n  const isSigned = () => type === 'SIGNED-TX';\n  const isRpc = () => type === 'RPC';\n  const isConstant = () => type === 'CONSTANT';\n\n  const loadSudoKey = () => {\n    (async function () {\n      if (!api) { return; }\n      setSudoKey(null);\n    })();\n  };\n\n  useEffect(loadSudoKey, [api]);\n\n  const getFromAcct = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = accountPair;\n    let fromAcct;\n\n    // signer is from Polkadot-js browser extension\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromAcct = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromAcct = accountPair;\n    }\n\n    return fromAcct;\n  };\n\n  const txResHandler = ({ status }) =>\n    status.isFinalized\n      ? setStatus(`😉 Finalized. Block hash: ${status.asFinalized.toString()}`)\n      : setStatus(`Current transaction status: ${status.type}`);\n\n  const txErrHandler = err =>\n    setStatus(`😞 Transaction Failed: ${err.toString()}`);\n\n  const sudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx.sudo.sudo(api.tx[palletRpc][callable](...transformed))\n      : api.tx.sudo.sudo(api.tx[palletRpc][callable]());\n\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const uncheckedSudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const txExecute =\n        api.tx.sudo.sudoUncheckedWeight(api.tx[palletRpc][callable](...inputParams), 0);\n\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const signedTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    const unsub = await txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const unsignedTx = async () => {\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    const unsub = await txExecute.send(txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const queryResHandler = result =>\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n\n  const query = async () => {\n    const transformed = transformParams(paramFields, inputParams);\n    const unsub = await api.query[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const rpc = async () => {\n    const transformed = transformParams(paramFields, inputParams, { emptyAsNull: false });\n    const unsub = await api.rpc[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const constant = () => {\n    const result = api.consts[palletRpc][callable];\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n  };\n\n  const transaction = async () => {\n    if (unsub) {\n      unsub();\n      setUnsub(null);\n    }\n\n    setStatus('Sending...');\n\n    (isSudo() && sudoTx()) ||\n    (isUncheckedSudo() && uncheckedSudoTx()) ||\n    (isSigned() && signedTx()) ||\n    (isUnsigned() && unsignedTx()) ||\n    (isQuery() && query()) ||\n    (isRpc() && rpc()) ||\n    (isConstant() && constant());\n  };\n\n  const transformParams = (paramFields, inputParams, opts = { emptyAsNull: true }) => {\n    // if `opts.emptyAsNull` is true, empty param value will be added to res as `null`.\n    //   Otherwise, it will not be added\n    const paramVal = inputParams.map(inputParam => {\n      // To cater the js quirk that `null` is a type of `object`.\n      if (typeof inputParam === 'object' && inputParam !== null && typeof inputParam.value === 'string') {\n        return inputParam.value.trim();\n      } else if (typeof inputParam === 'string') {\n        return inputParam.trim();\n      }\n      return inputParam;\n    });\n    const params = paramFields.map((field, ind) => ({ ...field, value: paramVal[ind] || null }));\n\n    return params.reduce((memo, { type = 'string', value }) => {\n      if (value == null || value === '') return (opts.emptyAsNull ? [...memo, null] : memo);\n\n      let converted = value;\n\n      // Deal with a vector\n      if (type.indexOf('Vec<') >= 0) {\n        converted = converted.split(',').map(e => e.trim());\n        converted = converted.map(single => isNumType(type)\n          ? (single.indexOf('.') >= 0 ? Number.parseFloat(single) : Number.parseInt(single))\n          : single\n        );\n        return [...memo, converted];\n      }\n\n      // Deal with a single value\n      if (isNumType(type)) {\n        converted = converted.indexOf('.') >= 0 ? Number.parseFloat(converted) : Number.parseInt(converted);\n      }\n      return [...memo, converted];\n    }, []);\n  };\n\n  const isNumType = type =>\n    utils.paramConversion.num.some(el => type.indexOf(el) >= 0);\n\n  const allParamsFilled = () => {\n    if (paramFields.length === 0) { return true; }\n\n    return paramFields.every((paramField, ind) => {\n      const param = inputParams[ind];\n      if (paramField.optional) { return true; }\n      if (param == null) { return false; }\n\n      const value = typeof param === 'object' ? param.value : param;\n      return value !== null && value !== '';\n    });\n  };\n\n  const isSudoer = acctPair => {\n    if (!sudoKey || !acctPair) { return false; }\n    return acctPair.address === sudoKey;\n  };\n\n  return (\n    <Button\n      basic\n      color={color}\n      style={style}\n      type='submit'\n      onClick={transaction}\n      disabled={ disabled || !palletRpc || !callable || !allParamsFilled() ||\n        ((isSudo() || isUncheckedSudo()) && !isSudoer(accountPair)) }\n    >\n      {label}\n    </Button>\n  );\n}\n\n// prop type checking\nTxButton.propTypes = {\n  accountPair: PropTypes.object,\n  setStatus: PropTypes.func.isRequired,\n  type: PropTypes.oneOf([\n    'QUERY', 'RPC', 'SIGNED-TX', 'UNSIGNED-TX', 'SUDO-TX', 'UNCHECKED-SUDO-TX',\n    'CONSTANT']).isRequired,\n  attrs: PropTypes.shape({\n    palletRpc: PropTypes.string,\n    callable: PropTypes.string,\n    inputParams: PropTypes.array,\n    paramFields: PropTypes.array\n  }).isRequired\n};\n\nfunction TxGroupButton (props) {\n  return (\n    <Button.Group>\n      <TxButton\n        label='Unsigned'\n        type='UNSIGNED-TX'\n        color='grey'\n        {...props}\n      />\n      <Button.Or />\n      <TxButton\n        label='Signed'\n        type='SIGNED-TX'\n        color='blue'\n        {...props}\n      />\n      <Button.Or />\n      <TxButton\n        label='SUDO'\n        type='SUDO-TX'\n        color='red'\n        {...props}\n      />\n    </Button.Group>\n  );\n}\n\nexport { TxButton, TxGroupButton };\n","// This component will simply add utility functions to your developer console.\nimport { useSubstrate } from '../';\n\nexport default function DeveloperConsole (props) {\n  const { api, apiState, keyring, keyringState } = useSubstrate();\n  if (apiState === 'READY') { window.api = api; }\n  if (keyringState === 'READY') { window.keyring = keyring; }\n  window.util = require('@polkadot/util');\n  window.utilCrypto = require('@polkadot/util-crypto');\n\n  return null;\n}\n","import React, { useState, useEffect } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport {\n  Menu,\n  Button,\n  Dropdown,\n  Container,\n  Icon,\n  Image,\n  Label\n} from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { keyring } = useSubstrate();\n  const { setAccountAddress } = props;\n  const [accountSelected, setAccountSelected] = useState('');\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: 'user'\n  }));\n\n  const initialAddress =\n    keyringOptions.length > 0 ? keyringOptions[0].value : '';\n\n  // Set the initial address\n  useEffect(() => {\n    setAccountAddress(initialAddress);\n    setAccountSelected(initialAddress);\n  }, [setAccountAddress, initialAddress]);\n\n  const onChange = address => {\n    // Update state with new account address\n    setAccountAddress(address);\n    setAccountSelected(address);\n  };\n\n  return (\n    <Menu\n      attached='top'\n      tabular\n      style={{\n        backgroundColor: '#fff',\n        borderColor: '#fff',\n        paddingTop: '1em',\n        paddingBottom: '1em'\n      }}\n    >\n      <Container>\n        <Menu.Menu>\n          <Image src={`${process.env.PUBLIC_URL}/assets/substrate-logo.png`} size='mini' />\n        </Menu.Menu>\n        <Menu.Menu position='right' style={{ alignItems: 'center' }}>\n          { !accountSelected\n            ? <span>\n              Add your account with the{' '}\n              <a\n                target='_blank'\n                rel='noopener noreferrer'\n                href='https://github.com/polkadot-js/extension'\n              >\n                Polkadot JS Extension\n              </a>\n            </span>\n            : null }\n          <CopyToClipboard text={accountSelected}>\n            <Button\n              basic\n              circular\n              size='large'\n              icon='user'\n              color={accountSelected ? 'green' : 'red'}\n            />\n          </CopyToClipboard>\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder='Select an account'\n            options={keyringOptions}\n            onChange={(_, dropdown) => {\n              onChange(dropdown.value);\n            }}\n            value={accountSelected}\n          />\n          <BalanceAnnotation accountSelected={accountSelected} />\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  );\n}\n\nfunction BalanceAnnotation (props) {\n  const { accountSelected } = props;\n  const { api } = useSubstrate();\n  const [accountBalance, setAccountBalance] = useState(0);\n\n  // When account address changes, update subscriptions\n  useEffect(() => {\n    let unsubscribe;\n\n    // If the user has selected an address, create a new subscription\n    accountSelected &&\n      api.query.system.account(accountSelected, balance => {\n        setAccountBalance(balance.data.free.toHuman());\n      })\n        .then(unsub => {\n          unsubscribe = unsub;\n        })\n        .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api, accountSelected]);\n\n  return accountSelected ? (\n    <Label pointing='left'>\n      <Icon name='money' color='green' />\n      {accountBalance}\n    </Label>\n  ) : null;\n}\n\nexport default function AccountSelector (props) {\n  const { api, keyring } = useSubstrate();\n  return keyring.getPairs && api.query ? <Main {...props} /> : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Table, Grid, Button } from 'semantic-ui-react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { useSubstrate } from './substrate-lib';\n\nexport default function Main (props) {\n  const { api, keyring } = useSubstrate();\n  const accounts = keyring.getPairs();\n  const [balances, setBalances] = useState({});\n\n  useEffect(() => {\n    const addresses = keyring.getPairs().map(account => account.address);\n    let unsubscribeAll = null;\n\n    api.query.system.account\n      .multi(addresses, balances => {\n        const balancesMap = addresses.reduce((acc, address, index) => ({\n          ...acc, [address]: balances[index].data.free.toHuman()\n        }), {});\n        setBalances(balancesMap);\n      }).then(unsub => {\n        unsubscribeAll = unsub;\n      }).catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api, keyring, setBalances]);\n\n  return (\n    <Grid.Column>\n      <h1>Balances</h1>\n      <Table celled striped size='small'>\n        <Table.Body>{accounts.map(account =>\n          <Table.Row key={account.address}>\n            <Table.Cell width={3} textAlign='right'>{account.meta.name}</Table.Cell>\n            <Table.Cell width={10}>\n              <span style={{ display: 'inline-block', minWidth: '31em' }}>\n                {account.address}\n              </span>\n              <CopyToClipboard text={account.address}>\n                <Button\n                  basic\n                  circular\n                  compact\n                  size='mini'\n                  color='blue'\n                  icon='copy outline'\n                />\n              </CopyToClipboard>\n            </Table.Cell>\n            <Table.Cell width={3}>{\n              balances && balances[account.address] &&\n              balances[account.address]\n            }</Table.Cell>\n          </Table.Row>\n        )}\n        </Table.Body>\n      </Table>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const { finalized } = props;\n  const [blockNumber, setBlockNumber] = useState(0);\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\n\n  const bestNumber = finalized\n    ? api.derive.chain.bestNumberFinalized\n    : api.derive.chain.bestNumber;\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    bestNumber(number => {\n      setBlockNumber(number.toNumber());\n      setBlockNumberTimer(0);\n    })\n      .then(unsub => {\n        unsubscribeAll = unsub;\n      })\n      .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [bestNumber]);\n\n  const timer = () => {\n    setBlockNumberTimer(time => time + 1);\n  };\n\n  useEffect(() => {\n    const id = setInterval(timer, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label={(finalized ? 'Finalized' : 'Current') + ' Block'}\n            value={blockNumber}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='time' /> {blockNumberTimer}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function BlockNumber (props) {\n  const { api } = useSubstrate();\n  return api.derive &&\n    api.derive.chain &&\n    api.derive.chain.bestNumber &&\n    api.derive.chain.bestNumberFinalized ? (\n      <Main {...props} />\n    ) : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Feed, Grid, Button } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\n// Events to be filtered from feed\nconst FILTERED_EVENTS = [\n  'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})',\n  'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'\n];\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [eventFeed, setEventFeed] = useState([]);\n\n  useEffect(() => {\n    let unsub = null;\n    const allEvents = async () => {\n      unsub = await api.query.system.events(events => {\n        // loop through the Vec<EventRecord>\n        events.forEach(record => {\n          // extract the phase, event and the event types\n          const { event, phase } = record;\n          const types = event.typeDef;\n\n          // show what we are busy with\n          const eventName = `${event.section}:${\n            event.method\n          }:: (phase=${phase.toString()})`;\n\n          if (FILTERED_EVENTS.includes(eventName)) return;\n\n          // loop through each of the parameters, displaying the type and data\n          const params = event.data.map(\n            (data, index) => `${types[index].type}: ${data.toString()}`\n          );\n\n          setEventFeed(e => [{\n            icon: 'bell',\n            summary: `${eventName}-${e.length}`,\n            extraText: event.meta.documentation.join(', ').toString(),\n            content: params.join(', ')\n          }, ...e]);\n        });\n      });\n    };\n\n    allEvents();\n    return () => unsub && unsub();\n  }, [api.query.system]);\n\n  const { feedMaxHeight = 250 } = props;\n\n  return (\n    <Grid.Column width={8}>\n      <h1 style={{ float: 'left' }}>Events</h1>\n      <Button\n        basic circular\n        size='mini'\n        color='grey'\n        floated='right'\n        icon='erase'\n        onClick={ _ => setEventFeed([]) }\n      />\n      <Feed style={{ clear: 'both', overflow: 'auto', maxHeight: feedMaxHeight }} events={eventFeed} />\n    </Grid.Column>\n  );\n}\n\nexport default function Events (props) {\n  const { api } = useSubstrate();\n  return api.query && api.query.system && api.query.system.events ? (\n    <Main {...props} />\n  ) : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Form, Dropdown, Input, Label } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton, TxGroupButton } from './substrate-lib/components';\n\nconst argIsOptional = (arg) =>\n  arg.type.toString().startsWith('Option<');\n\nfunction Main (props) {\n  const { api, jsonrpc } = useSubstrate();\n  const { accountPair } = props;\n  const [status, setStatus] = useState(null);\n\n  const [interxType, setInterxType] = useState('EXTRINSIC');\n  const [palletRPCs, setPalletRPCs] = useState([]);\n  const [callables, setCallables] = useState([]);\n  const [paramFields, setParamFields] = useState([]);\n\n  const initFormState = {\n    palletRpc: '',\n    callable: '',\n    inputParams: []\n  };\n\n  const [formState, setFormState] = useState(initFormState);\n  const { palletRpc, callable, inputParams } = formState;\n\n  const getApiType = (api, interxType) => {\n    if (interxType === 'QUERY') {\n      return api.query;\n    } else if (interxType === 'EXTRINSIC') {\n      return api.tx;\n    } else if (interxType === 'RPC') {\n      return api.rpc;\n    } else {\n      return api.consts;\n    }\n  };\n\n  const updatePalletRPCs = () => {\n    if (!api) { return; }\n    const apiType = getApiType(api, interxType);\n    const palletRPCs = Object.keys(apiType).sort()\n      .filter(pr => Object.keys(apiType[pr]).length > 0)\n      .map(pr => ({ key: pr, value: pr, text: pr }));\n    setPalletRPCs(palletRPCs);\n  };\n\n  const updateCallables = () => {\n    if (!api || palletRpc === '') { return; }\n    const callables = Object.keys(getApiType(api, interxType)[palletRpc]).sort()\n      .map(c => ({ key: c, value: c, text: c }));\n    setCallables(callables);\n  };\n\n  const updateParamFields = () => {\n    if (!api || palletRpc === '' || callable === '') {\n      setParamFields([]);\n      return;\n    }\n\n    let paramFields = [];\n\n    if (interxType === 'QUERY') {\n      const metaType = api.query[palletRpc][callable].meta.type;\n      if (metaType.isPlain) {\n        // Do nothing as `paramFields` is already set to []\n      } else if (metaType.isMap) {\n        paramFields = [{\n          name: metaType.asMap.key.toString(),\n          type: metaType.asMap.key.toString(),\n          optional: false\n        }];\n      } else if (metaType.isDoubleMap) {\n        paramFields = [{\n          name: metaType.asDoubleMap.key1.toString(),\n          type: metaType.asDoubleMap.key1.toString(),\n          optional: false\n        }, {\n          name: metaType.asDoubleMap.key2.toString(),\n          type: metaType.asDoubleMap.key2.toString(),\n          optional: false\n        }];\n      }\n    } else if (interxType === 'EXTRINSIC') {\n      const metaArgs = api.tx[palletRpc][callable].meta.args;\n\n      if (metaArgs && metaArgs.length > 0) {\n        paramFields = metaArgs.map(arg => ({\n          name: arg.name.toString(),\n          type: arg.type.toString(),\n          optional: argIsOptional(arg)\n        }));\n      }\n    } else if (interxType === 'RPC') {\n      let metaParam = [];\n\n      if (jsonrpc[palletRpc] && jsonrpc[palletRpc][callable]) {\n        metaParam = jsonrpc[palletRpc][callable].params;\n      }\n\n      if (metaParam.length > 0) {\n        paramFields = metaParam.map(arg => ({\n          name: arg.name,\n          type: arg.type,\n          optional: arg.isOptional || false\n        }));\n      }\n    } else if (interxType === 'CONSTANT') {\n      paramFields = [];\n    }\n\n    setParamFields(paramFields);\n  };\n\n  useEffect(updatePalletRPCs, [api, interxType]);\n  useEffect(updateCallables, [api, interxType, palletRpc]);\n  useEffect(updateParamFields, [api, interxType, palletRpc, callable]);\n\n  const onPalletCallableParamChange = (_, data) => {\n    setFormState(formState => {\n      let res;\n      const { state, value } = data;\n      if (typeof state === 'object') {\n        // Input parameter updated\n        const { ind, paramField: { type } } = state;\n        const inputParams = [...formState.inputParams];\n        inputParams[ind] = { type, value };\n        res = { ...formState, inputParams };\n      } else if (state === 'palletRpc') {\n        res = { ...formState, [state]: value, callable: '', inputParams: [] };\n      } else if (state === 'callable') {\n        res = { ...formState, [state]: value, inputParams: [] };\n      }\n      return res;\n    });\n  };\n\n  const onInterxTypeChange = (ev, data) => {\n    setInterxType(data.value);\n    // clear the formState\n    setFormState(initFormState);\n  };\n\n  const getOptionalMsg = (interxType) =>\n    interxType === 'RPC'\n      ? 'Optional Parameter'\n      : 'Leaving this field as blank will submit a NONE value';\n\n  return (\n    <Grid.Column width={8}>\n      <h1>Pallet Interactor</h1>\n      <Form>\n        <Form.Group style={{ overflowX: 'auto' }} inline>\n          <label>Interaction Type</label>\n          <Form.Radio\n            label='Extrinsic'\n            name='interxType'\n            value='EXTRINSIC'\n            checked={interxType === 'EXTRINSIC'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='Query'\n            name='interxType'\n            value='QUERY'\n            checked={interxType === 'QUERY'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='RPC'\n            name='interxType'\n            value='RPC'\n            checked={interxType === 'RPC'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='Constant'\n            name='interxType'\n            value='CONSTANT'\n            checked={interxType === 'CONSTANT'}\n            onChange={onInterxTypeChange}\n          />\n        </Form.Group>\n        <Form.Field>\n          <Dropdown\n            placeholder='Pallets / RPC'\n            fluid\n            label='Pallet / RPC'\n            onChange={onPalletCallableParamChange}\n            search\n            selection\n            state='palletRpc'\n            value={palletRpc}\n            options={palletRPCs}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder='Callables'\n            fluid\n            label='Callable'\n            onChange={onPalletCallableParamChange}\n            search\n            selection\n            state='callable'\n            value={callable}\n            options={callables}\n          />\n        </Form.Field>\n        {paramFields.map((paramField, ind) =>\n          <Form.Field key={`${paramField.name}-${paramField.type}`}>\n            <Input\n              placeholder={paramField.type}\n              fluid\n              type='text'\n              label={paramField.name}\n              state={{ ind, paramField }}\n              value={ inputParams[ind] ? inputParams[ind].value : '' }\n              onChange={onPalletCallableParamChange}\n            />\n            { paramField.optional\n              ? <Label\n                basic\n                pointing\n                color='teal'\n                content = { getOptionalMsg(interxType) }\n              />\n              : null\n            }\n          </Form.Field>\n        )}\n        <Form.Field style={{ textAlign: 'center' }}>\n          <InteractorSubmit\n            accountPair={accountPair}\n            setStatus={setStatus}\n            attrs={{ interxType, palletRpc, callable, inputParams, paramFields }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n\nfunction InteractorSubmit (props) {\n  const { attrs: { interxType } } = props;\n  if (interxType === 'QUERY') {\n    return <TxButton\n      label = 'Query'\n      type = 'QUERY'\n      color = 'blue'\n      {...props}\n    />;\n  } else if (interxType === 'EXTRINSIC') {\n    return <TxGroupButton {...props} />;\n  } else if (interxType === 'RPC' || interxType === 'CONSTANT') {\n    return <TxButton\n      label = 'Submit'\n      type = {interxType}\n      color = 'blue'\n      {...props}\n    />;\n  }\n}\n\nexport default function Interactor (props) {\n  const { api } = useSubstrate();\n  return api.tx ? <Main {...props} /> : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Modal, Button, Card } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [metadata, setMetadata] = useState({ data: null, version: null });\n\n  useEffect(() => {\n    const getMetadata = async () => {\n      try {\n        const data = await api.rpc.state.getMetadata();\n        setMetadata({ data, version: data.version });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getMetadata();\n  }, [api.rpc.state]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>Metadata</Card.Header>\n          <Card.Meta>\n            <span>v{metadata.version}</span>\n          </Card.Meta>\n        </Card.Content>\n        <Card.Content extra>\n          <Modal trigger={<Button>Show Metadata</Button>}>\n            <Modal.Header>Runtime Metadata</Modal.Header>\n            <Modal.Content scrolling>\n              <Modal.Description>\n                <pre>\n                  <code>{JSON.stringify(metadata.data, null, 2)}</code>\n                </pre>\n              </Modal.Description>\n            </Modal.Content>\n          </Modal>\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function Metadata (props) {\n  const { api } = useSubstrate();\n  return api.rpc && api.rpc.state && api.rpc.state.getMetadata ? (\n    <Main {...props} />\n  ) : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, Icon, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = async () => {\n      try {\n        const [chain, nodeName, nodeVersion] = await Promise.all([\n          api.rpc.system.chain(),\n          api.rpc.system.name(),\n          api.rpc.system.version()\n        ]);\n        setNodeInfo({ chain, nodeName, nodeVersion });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>\n            Built using the{' '}\n            <a href='https://github.com/substrate-developer-hub/substrate-front-end-template'>\n              Substrate Front End Template\n            </a>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='setting' />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function NodeInfo (props) {\n  const { api } = useSubstrate();\n  return api.rpc &&\n    api.rpc.system &&\n    api.rpc.system.chain &&\n    api.rpc.system.name &&\n    api.rpc.system.version ? (\n      <Main {...props} />\n    ) : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Form, Input, Grid, Card, Statistic } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const { accountPair } = props;\n\n  // The transaction submission status\n  const [status, setStatus] = useState('');\n\n  // The currently stored value\n  const [currentValue, setCurrentValue] = useState(0);\n  const [formValue, setFormValue] = useState(0);\n\n  useEffect(() => {\n    let unsubscribe;\n    api.query.templateModule.something(newValue => {\n      // The storage value is an Option<u32>\n      // So we have to check whether it is None first\n      // There is also unwrapOr\n      if (newValue.isNone) {\n        setCurrentValue('<None>');\n      } else {\n        setCurrentValue(newValue.unwrap().toNumber());\n      }\n    }).then(unsub => {\n      unsubscribe = unsub;\n    })\n      .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api.query.templateModule]);\n\n  return (\n    <Grid.Column width={8}>\n      <h1>Template Module</h1>\n      <Card centered>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label='Current Value'\n            value={currentValue}\n          />\n        </Card.Content>\n      </Card>\n      <Form>\n        <Form.Field>\n          <Input\n            label='New Value'\n            state='newValue'\n            type='number'\n            onChange={(_, { value }) => setFormValue(value)}\n          />\n        </Form.Field>\n        <Form.Field style={{ textAlign: 'center' }}>\n          <TxButton\n            accountPair={accountPair}\n            label='Store Something'\n            type='SIGNED-TX'\n            setStatus={setStatus}\n            attrs={{\n              palletRpc: 'templateModule',\n              callable: 'doSomething',\n              inputParams: [formValue],\n              paramFields: [true]\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n\nexport default function TemplateModule (props) {\n  const { api } = useSubstrate();\n  return (api.query.templateModule && api.query.templateModule.something\n    ? <Main {...props} /> : null);\n}\n","import React, { useState } from 'react';\nimport { Form, Input, Grid, Label, Icon } from 'semantic-ui-react';\nimport { TxButton } from './substrate-lib/components';\n\nexport default function Main (props) {\n  const [status, setStatus] = useState(null);\n  const [formState, setFormState] = useState({ addressTo: null, amount: 0 });\n  const { accountPair } = props;\n\n  const onChange = (_, data) =>\n    setFormState(prev => ({ ...prev, [data.state]: data.value }));\n\n  const { addressTo, amount } = formState;\n\n  return (\n    <Grid.Column width={8}>\n      <h1>Transfer</h1>\n      <Form>\n        <Form.Field>\n          <Label basic color='teal'>\n            <Icon name='hand point right' />\n            1 Unit = 1000000000000\n          </Label>\n        </Form.Field>\n        <Form.Field>Transfer more than the existential amount for account with 0 balance</Form.Field>\n        <Form.Field>\n          <Input\n            fluid\n            label='To'\n            type='text'\n            placeholder='address'\n            state='addressTo'\n            onChange={onChange}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            fluid\n            label='Amount'\n            type='number'\n            state='amount'\n            onChange={onChange}\n          />\n        </Form.Field>\n        <Form.Field style={{ textAlign: 'center' }}>\n          <TxButton\n            accountPair={accountPair}\n            label='Submit'\n            type='SIGNED-TX'\n            setStatus={setStatus}\n            attrs={{\n              palletRpc: 'balances',\n              callable: 'transfer',\n              inputParams: [addressTo, amount],\n              paramFields: [true, true]\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from 'react';\nimport { Form, Input, Grid } from 'semantic-ui-react';\nimport { TxButton } from './substrate-lib/components';\n\nexport default function Main (props) {\n  const [status, setStatus] = useState('');\n  const [proposal, setProposal] = useState({});\n  const { accountPair } = props;\n\n  const bufferToHex = buffer => {\n    return Array.from(new Uint8Array(buffer))\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join('');\n  };\n\n  const handleFileChosen = file => {\n    const fileReader = new FileReader();\n    fileReader.onloadend = e => {\n      const content = bufferToHex(fileReader.result);\n      setProposal(`0x${content}`);\n    };\n\n    fileReader.readAsArrayBuffer(file);\n  };\n\n  return (\n    <Grid.Column width={8}>\n      <h1>Upgrade Runtime</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            type='file'\n            id='file'\n            label='Wasm File'\n            accept='.wasm'\n            onChange={e => handleFileChosen(e.target.files[0])}\n          />\n        </Form.Field>\n        <Form.Field style={{ textAlign: 'center' }}>\n          <TxButton\n            accountPair={accountPair}\n            label='Upgrade'\n            type='UNCHECKED-SUDO-TX'\n            setStatus={setStatus}\n            attrs={{\n              palletRpc: 'system',\n              callable: 'setCode',\n              inputParams: [proposal],\n              paramFields: [true]\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Sticky, Message } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { SubstrateContextProvider, useSubstrate } from './substrate-lib';\nimport { DeveloperConsole } from './substrate-lib/components';\n\nimport AccountSelector from './AccountSelector';\nimport Balances from './Balances';\nimport BlockNumber from './BlockNumber';\nimport Events from './Events';\nimport Interactor from './Interactor';\nimport Metadata from './Metadata';\nimport NodeInfo from './NodeInfo';\nimport TemplateModule from './TemplateModule';\nimport Transfer from './Transfer';\nimport Upgrade from './Upgrade';\n\nfunction Main () {\n  const [accountAddress, setAccountAddress] = useState(null);\n  const { apiState, keyring, keyringState, apiError } = useSubstrate();\n  const accountPair =\n    accountAddress &&\n    keyringState === 'READY' &&\n    keyring.getPair(accountAddress);\n\n  const loader = text =>\n    <Dimmer active>\n      <Loader size='small'>{text}</Loader>\n    </Dimmer>;\n\n  const message = err =>\n    <Grid centered columns={2} padded>\n      <Grid.Column>\n        <Message negative compact floating\n          header='Error Connecting to Substrate'\n          content={`${JSON.stringify(err,null,4)}`}\n        />\n      </Grid.Column>\n    </Grid>;\n\n  if (apiState === 'ERROR') return message(apiError);\n  else if (apiState !== 'READY') return loader('Connecting to Substrate');\n\n  if (keyringState !== 'READY') {\n    return loader('Loading accounts (please review any extension\\'s authorization)');\n  }\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Sticky context={contextRef}>\n        <AccountSelector setAccountAddress={setAccountAddress} />\n      </Sticky>\n      <Container>\n        <Grid stackable columns='equal'>\n          <Grid.Row stretched>\n            <NodeInfo />\n            <Metadata />\n            <BlockNumber />\n            <BlockNumber finalized />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <Balances />\n          </Grid.Row>\n          <Grid.Row>\n            <Transfer accountPair={accountPair} />\n            <Upgrade accountPair={accountPair} />\n          </Grid.Row>\n          <Grid.Row>\n            <Interactor accountPair={accountPair} />\n            <Events />\n          </Grid.Row>\n          <Grid.Row>\n            <TemplateModule accountPair={accountPair} />\n          </Grid.Row>\n        </Grid>\n      </Container>\n      <DeveloperConsole />\n    </div>\n  );\n}\n\nexport default function App () {\n  return (\n    <SubstrateContextProvider>\n      <Main />\n    </SubstrateContextProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}